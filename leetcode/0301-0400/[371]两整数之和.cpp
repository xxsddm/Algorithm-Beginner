//给你两个整数 a 和 b ，不使用 运算符 + 和 - ，计算并返回两整数之和。 
//
// 
//
// 示例 1： 
//
// 
//输入：a = 1, b = 2
//输出：3
// 
//
// 示例 2： 
//
// 
//输入：a = 2, b = 3
//输出：5
// 
//
// 
//
// 提示： 
//
// 
// -1000 <= a, b <= 1000 
// 
// Related Topics 位运算 数学 👍 516 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
// 对于非负数的加法显然成立,这里作为条件使用
// 举例说明对于非负数加法,这里的位运算对于所有整数均 成立(这里只考虑8位)
// (1)非负数和负数相加(以10-9为例,正数需绝对值不小于负数绝对值)
// -9=(~9+1)=(~00001001)+1=11110110+1=11110111    (相反数是该数的按位取反+1)
// 则9-9=00001001+11110111=00001001+11110110+1=11111111+1=00000000=0
// 则10-9=1+9-9=00000001+00001001+11110111=00000001=1
// 故非负数和负数相加成立(正数绝对值不小于负数绝对值)
// (2)负数和负数相加(以-3-6为例)
// -3-6=-(3+6)=~(00000011+00000110)+1=-9
// (3)任意非负数和负数的和
// 结合(1)(2)可得
class Solution {
public:
    int getSum(int a, int b) {
        while (b != 0) {
            int temp = a;
            a = a ^ b;  // 相加(不考虑进位)
            b = (temp & b) << 1;    // 进位部分
        }
        return a;
    }
};

//leetcode submit region end(Prohibit modification and deletion)
